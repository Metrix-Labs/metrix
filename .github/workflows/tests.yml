name: 'Tests'

on:
  push:
    branches:
      - main
      - develop
      - v4
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: read # to fetch code (actions/checkout)
  actions: read

# IMPORTANT
# Jobs using `nx affected` require nrwl/nx-set-shas, which in turn requires actions/checkout fetch-depth:0 (meaning unlimited)

jobs:
  conditions:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      api: ${{ steps.filter.outputs.api }}
      e2e: ${{ steps.filter.outputs.e2e }}
      cli: ${{ steps.filter.outputs.cli }}
      global: ${{ steps.filter.outputs.global }}
      is_local: ${{ github.event.pull_request.head.repo.full_name == github.repository && !(github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]') }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2 # need to check out previous 2 commits to see what has changed
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: .github/filters.yaml

  # Always run build in case an unrecognized file change could affect it
  # Build must complete before any other step that uses build, so that it gets cached here and doesn't build multiple times
  build:
    name: 'build (node: ${{ matrix.node }})'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20, 22]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - name: Monorepo build
        uses: ./.github/actions/run-build

  pretty:
    name: 'pretty (node: ${{ matrix.node }})'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20, 22]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - name: Run lint
        run: yarn prettier:check

  lint:
    name: 'lint (node: ${{ matrix.node }})'
    needs: [build] # build is needed so that imports can be verified
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20, 22]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # needed for nx-set-shas
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - uses: nrwl/nx-set-shas@v4
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - name: Monorepo build
        uses: ./.github/actions/run-build
      - name: Run lint
        run: yarn nx affected --target=lint --parallel --nx-ignore-cycles

  typescript:
    name: 'typescript (node: ${{ matrix.node }})'
    needs: [conditions, build]
    runs-on: ubuntu-latest
    if: needs.conditions.outputs.global == 'true' || needs.conditions.outputs.backend == 'true' || needs.conditions.outputs.backend == 'true'
    strategy:
      matrix:
        node: [20, 22]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # needed for nx-set-shas
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - uses: nrwl/nx-set-shas@v4
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - name: Monorepo build
        uses: ./.github/actions/run-build
      - name: TSC for packages
        run: yarn nx affected --target=test:ts --nx-ignore-cycles
      - name: TSC for back
        run: yarn nx affected --target=test:ts:back --nx-ignore-cycles
      - name: TSC for front
        run: yarn nx affected --target=test:ts:front --nx-ignore-cycles

  unit_back:
    if: needs.conditions.outputs.global == 'true' || needs.conditions.outputs.backend == 'true'
    name: 'unit_back (node: ${{ matrix.node }})'
    needs: [conditions, build]
    runs-on: ubuntu-latest
    env:
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
    strategy:
      matrix:
        node: [20, 22]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # needed for nx-set-shas
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - uses: nrwl/nx-set-shas@v4
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - name: Monorepo build
        uses: ./.github/actions/run-build
      - name: Run tests
        run: yarn nx affected --target=test:unit --nx-ignore-cycles

  unit_front:
    if: needs.conditions.outputs.global == 'true' || needs.conditions.outputs.frontend == 'true'
    name: 'unit_front (node: ${{ matrix.node }})'
    needs: [conditions, build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # remove once tests aren't flaky
      matrix:
        node: [20]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # needed for nx-set-shas
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - uses: nrwl/nx-set-shas@v4
      - name: Monorepo install
        uses: ./.github/actions/yarn-nm-install
      - name: Monorepo build
        uses: ./.github/actions/run-build
      - name: Run tests
        run: yarn nx affected --target=test:front --nx-ignore-cycles -- --runInBand

  test_result:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    name: aggregate_test_result
    needs: [pretty, lint, build, typescript, unit_back, unit_front]
    steps:
      - run: exit 1
        if: >-
          ${{
                contains(needs.*.result, 'failure')
            || contains(needs.*.result, 'cancelled')
          }}
